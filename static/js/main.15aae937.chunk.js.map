{"version":3,"sources":["Test1.js","Test2.js","App.js","reportWebVitals.js","index.js"],"names":["React","Component","Test2","props","console","log","useState","arg","s1","setS1","useEffect","onClick","val","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOACoBA,IAAMC,U,MC2BXC,MA3Bf,SAAeC,GACXC,QAAQC,IAAI,aADM,MAEAC,mBAASH,EAAMI,KAFf,mBAEXC,EAFW,KAEPC,EAFO,KAclB,OAJAC,qBAAU,WACNN,QAAQC,IAAI,aAEhBD,QAAQC,IAAI,YAER,qCACCD,QAAQC,IAAI,YACb,8BACI,wBAAQM,QAfK,WACjBP,QAAQC,IAAI,WACZ,IAAIO,EAAMJ,EACVI,IACAH,EAAMG,IAWF,oBAEJ,8BACIJ,Q,MCVGK,MARf,WACE,OACE,mCACE,cAAC,EAAD,CAAON,IAAK,QCKHO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.15aae937.chunk.js","sourcesContent":["import React from 'react';\r\nclass Test1 extends React.Component {\r\n    constructor(props){\r\n        console.clear();\r\n        console.log('construktor');\r\n        console.log(props);\r\n        super();\r\n        this.state={\r\n            s1 : 0 \r\n        }\r\n    }\r\n    buttonHandler =()=>{\r\n        let val=this.state.s1;\r\n        val++;\r\n        this.setState({s1:val});\r\n    }\r\n\r\n    \r\n    static getDerivedStateFromProps(props, state){\r\n        console.log('get derived state');\r\n        return null;\r\n        //return({\"s1\":props.arg})\r\n    }\r\n\r\n    componentDidMount(){\r\n        console.log(\"component did mount\");\r\n    }\r\n    componentDidUpdate(){\r\n        console.log(\"component did update\");\r\n    }\r\n\r\n    render () {\r\n        console.log('render 1');\r\n        return(\r\n            <>\r\n            {console.log('render 2')}\r\n            <div>\r\n                {/* <button onClick={this.buttonHandler}>Push</button> */}\r\n            </div>\r\n            <div>\r\n                {/* {this.state.s1} */}\r\n            </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\nexport default Test1;","import React, {useState,useEffect} from \"react\";\r\nfunction Test2(props) {\r\n    console.log('set state');\r\n    const [s1, setS1]=useState(props.arg);\r\n    const buttonHandler =()=>{\r\n        console.log('handler');\r\n        let val = s1;\r\n        val++;\r\n        setS1(val); \r\n        //console.log(\"work\");\r\n    }\r\n    useEffect(()=>{\r\n        console.log(\"effect\");\r\n    });\r\n    console.log('render 1')\r\n    return(\r\n        <>\r\n        {console.log('render 2')}\r\n        <div>\r\n            <button onClick={buttonHandler}>Push</button> \r\n        </div>\r\n        <div>\r\n           {s1}\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Test2;","import Test1 from './Test1';\nimport Test2 from './Test2';\nimport './App.css';\n\nfunction App() {\n  return (\n    <>\n      <Test2 arg={77}/>\n    </>    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}